diff --git a/gearman/admin_client.py b/gearman/admin_client.py
index b138c0b..7aaf099 100644
--- a/gearman/admin_client.py
+++ b/gearman/admin_client.py
@@ -8,7 +8,7 @@ from gearman.admin_client_handler import GearmanAdminClientCommandHandler
 from gearman.errors import ConnectionError, InvalidAdminClientState, ServerUnavailable
 from gearman.protocol import GEARMAN_COMMAND_ECHO_RES, GEARMAN_COMMAND_ECHO_REQ, \
     GEARMAN_SERVER_COMMAND_STATUS, GEARMAN_SERVER_COMMAND_VERSION, GEARMAN_SERVER_COMMAND_WORKERS, \
-    GEARMAN_SERVER_COMMAND_MAXQUEUE, GEARMAN_SERVER_COMMAND_SHUTDOWN
+    GEARMAN_SERVER_COMMAND_MAXQUEUE, GEARMAN_SERVER_COMMAND_SHUTDOWN, GEARMAN_SERVER_COMMAND_THROTTLE,GEARMAN_SERVER_COMMAND_MEMSTATS
 
 gearman_logger = logging.getLogger(__name__)
 
@@ -76,6 +76,16 @@ class GearmanAdminClient(GearmanConnectionManager):
         self.current_handler.send_text_command(GEARMAN_SERVER_COMMAND_STATUS)
         return self.wait_until_server_responds(GEARMAN_SERVER_COMMAND_STATUS)
 
+    def put_throttle(self, function_name, throttle):
+        self.establish_admin_connection()
+        self.current_handler.send_text_command(GEARMAN_SERVER_COMMAND_THROTTLE, function_name, throttle)
+        return self.wait_until_server_responds(GEARMAN_SERVER_COMMAND_THROTTLE)
+
+    def get_memstats(self):
+        self.establish_admin_connection()
+        self.current_handler.send_text_command(GEARMAN_SERVER_COMMAND_MEMSTATS)
+        return self.wait_until_server_responds(GEARMAN_SERVER_COMMAND_MEMSTATS)
+
     def get_version(self):
         """Retrieves the version number of the Gearman server"""
         self.establish_admin_connection()
diff --git a/gearman/admin_client_handler.py b/gearman/admin_client_handler.py
index e32de0e..111074e 100644
--- a/gearman/admin_client_handler.py
+++ b/gearman/admin_client_handler.py
@@ -5,12 +5,13 @@ from gearman.command_handler import GearmanCommandHandler
 from gearman.errors import ProtocolError, InvalidAdminClientState
 from gearman.protocol import GEARMAN_COMMAND_ECHO_REQ, GEARMAN_COMMAND_TEXT_COMMAND, \
     GEARMAN_SERVER_COMMAND_STATUS, GEARMAN_SERVER_COMMAND_VERSION, \
-    GEARMAN_SERVER_COMMAND_WORKERS, GEARMAN_SERVER_COMMAND_MAXQUEUE, GEARMAN_SERVER_COMMAND_SHUTDOWN
+    GEARMAN_SERVER_COMMAND_WORKERS, GEARMAN_SERVER_COMMAND_MAXQUEUE, GEARMAN_SERVER_COMMAND_SHUTDOWN, GEARMAN_SERVER_COMMAND_THROTTLE, \
+    GEARMAN_SERVER_COMMAND_MEMSTATS
 
 gearman_logger = logging.getLogger(__name__)
 
 EXPECTED_GEARMAN_SERVER_COMMANDS = set([GEARMAN_SERVER_COMMAND_STATUS, GEARMAN_SERVER_COMMAND_VERSION, \
-    GEARMAN_SERVER_COMMAND_WORKERS, GEARMAN_SERVER_COMMAND_MAXQUEUE, GEARMAN_SERVER_COMMAND_SHUTDOWN])
+    GEARMAN_SERVER_COMMAND_WORKERS, GEARMAN_SERVER_COMMAND_MAXQUEUE, GEARMAN_SERVER_COMMAND_SHUTDOWN, GEARMAN_SERVER_COMMAND_THROTTLE, GEARMAN_SERVER_COMMAND_THROTTLE, GEARMAN_SERVER_COMMAND_MEMSTATS])
 
 class GearmanAdminClientCommandHandler(GearmanCommandHandler):
     """Special GEARMAN_COMMAND_TEXT_COMMAND command handler that'll parse text responses from the server"""
@@ -41,7 +42,7 @@ class GearmanAdminClientCommandHandler(GearmanCommandHandler):
         recv_response = self._recv_responses.popleft()
         return sent_command, recv_response
 
-    def send_text_command(self, command_line):
+    def send_text_command(self, command_line, function_name = None, throttle = None):
         """Send our administrative text command"""
         expected_server_command = None
         for server_command in EXPECTED_GEARMAN_SERVER_COMMANDS:
@@ -55,6 +56,8 @@ class GearmanAdminClientCommandHandler(GearmanCommandHandler):
         self._sent_commands.append(expected_server_command)
 
         output_text = '%s\n' % command_line
+        if command_line == GEARMAN_SERVER_COMMAND_THROTTLE:
+            output_text = '%s\t%s\t%s\n' % (command_line, function_name, str(throttle))
         self.send_command(GEARMAN_COMMAND_TEXT_COMMAND, raw_text=output_text)
 
     def send_echo_request(self, echo_string):
@@ -89,6 +92,31 @@ class GearmanAdminClientCommandHandler(GearmanCommandHandler):
         completed_work = cmd_callback(raw_text)
         return completed_work
 
+    def recv_server_throttle(self, raw_text):
+        split_token = raw_text.split('\t')
+        function, throttle = split_token
+        status_dict = {}
+        status_dict['function'] = function
+        status_dict['throttle'] = throttle
+        self._recv_responses.append(status_dict)
+        return False
+    
+    def recv_server_memstats(self, raw_text):
+        if raw_text == '.':
+            output_response = tuple(self._status_response)
+            self._recv_responses.append(output_response)
+            self._status_response = []
+            return False
+        split_tokens = raw_text.split('\t')
+        memory, total_threads, active_threads, uptime = split_tokens
+        status_dict = {}
+        status_dict['MemUsed'] = int(memory)
+        status_dict['TotalThreads'] = int(total_threads)
+        status_dict['ActiveThreads'] = int(active_threads)
+        status_dict['UpTime'] = int(uptime)
+        self._recv_responses.append(status_dict)
+        return False
+
     def recv_server_status(self, raw_text):
         """Slowly assemble a server status message line by line"""
         # If we received a '.', we've finished parsing this status message
@@ -134,15 +162,22 @@ class GearmanAdminClientCommandHandler(GearmanCommandHandler):
         if len(split_tokens) < self.WORKERS_FIELDS:
             raise ProtocolError('Received %d tokens, expected >= 4 tokens: %r' % (len(split_tokens), split_tokens))
 
-        if split_tokens[3] != ':':
-            raise ProtocolError('Malformed worker response: %r' % (split_tokens, ))
+        #if split_tokens[5] != ':':
+        #    raise ProtocolError('Malformed worker response: %r' % (split_tokens, ))
 
         # Label our fields and make the results Python friendly
         worker_dict = {}
         worker_dict['file_descriptor'] = split_tokens[0]
         worker_dict['ip'] = split_tokens[1]
         worker_dict['client_id'] = split_tokens[2]
-        worker_dict['tasks'] = tuple(split_tokens[4:])
+        if split_tokens[3] == ':':
+            worker_dict['tasks']  = tuple(split_tokens[4:])
+        elif split_tokens[5] == ':':
+            worker_dict['start_time'] = split_tokens[3]
+            worker_dict['end_time'] = split_tokens[4]
+            worker_dict['tasks'] = tuple(split_tokens[6:])
+        else:
+            raise ProtocolError('Malformed worker response: %r' % (split_tokens, ))
         self._workers_response.append(worker_dict)
         return True
 
diff --git a/gearman/constants.py b/gearman/constants.py
index f0d6f14..8a48031 100644
--- a/gearman/constants.py
+++ b/gearman/constants.py
@@ -10,3 +10,5 @@ JOB_PENDING  = 'PENDING'  # Request has been submitted, pending handle
 JOB_CREATED  = 'CREATED'  # Request has been accepted
 JOB_FAILED   = 'FAILED'   # Request received an explicit fail
 JOB_COMPLETE = 'COMPLETE' # Request received an explicit complete
+
+GEARMAN_JOB_NAME = 'gm_task'
diff --git a/gearman/protocol.py b/gearman/protocol.py
index c5170c2..dbf80a7 100644
--- a/gearman/protocol.py
+++ b/gearman/protocol.py
@@ -148,6 +148,8 @@ GEARMAN_SERVER_COMMAND_VERSION = 'version'
 GEARMAN_SERVER_COMMAND_WORKERS = 'workers'
 GEARMAN_SERVER_COMMAND_MAXQUEUE = 'maxqueue'
 GEARMAN_SERVER_COMMAND_SHUTDOWN = 'shutdown'
+GEARMAN_SERVER_COMMAND_THROTTLE = 'throttle'
+GEARMAN_SERVER_COMMAND_MEMSTATS = 'memstats'
 
 def get_command_name(cmd_type):
     return GEARMAN_COMMAND_TO_NAME.get(cmd_type, cmd_type)
diff --git a/gearman/worker.py b/gearman/worker.py
index 1bf463e..8683875 100644
--- a/gearman/worker.py
+++ b/gearman/worker.py
@@ -6,6 +6,7 @@ from gearman import compat
 from gearman.connection_manager import GearmanConnectionManager
 from gearman.worker_handler import GearmanWorkerCommandHandler
 from gearman.errors import ConnectionError
+from gearman.constants import GEARMAN_JOB_NAME
 
 gearman_logger = logging.getLogger(__name__)
 
@@ -190,7 +191,10 @@ class GearmanWorker(GearmanConnectionManager):
 
     def on_job_execute(self, current_job):
         try:
-            function_callback = self.worker_abilities[current_job.task]
+            if current_job.task in self.worker_abilities:
+                function_callback = self.worker_abilities[current_job.task]
+            else:
+                function_callback = self.worker_abilities[GEARMAN_JOB_NAME]
             job_result = function_callback(self, current_job)
         except Exception:
             return self.on_job_exception(current_job, sys.exc_info())
diff --git a/gearman/worker_handler.py b/gearman/worker_handler.py
index d945267..2e56b85 100644
--- a/gearman/worker_handler.py
+++ b/gearman/worker_handler.py
@@ -125,7 +125,7 @@ class GearmanWorkerCommandHandler(GearmanCommandHandler):
 
         AWAITING_JOB -> EXECUTE_JOB -> SLEEP :: Always transition once we're given a job
         """
-        assert task in self._handler_abilities, '%s not found in %r' % (task, self._handler_abilities)
+#        assert task in self._handler_abilities, '%s not found in %r' % (task, self._handler_abilities)
 
         # After this point, we know this connection handler is holding onto the job lock so we don't need to acquire it again
         if not self.connection_manager.check_job_lock(self):
@@ -142,6 +142,7 @@ class GearmanWorkerCommandHandler(GearmanCommandHandler):
 
         return True
 
+
     def recv_job_assign(self, job_handle, task, data):
         """JOB_ASSIGN and JOB_ASSIGN_UNIQ are essentially the same"""
-        return self.recv_job_assign(job_handle=job_handle, task=task, unique=None, data=data)
+        return self.recv_job_assign_uniq(job_handle=job_handle, task=task, unique=None, data=data)
